package com.ithub.board;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.ithub.bcomment.BcommentDTO;
import com.ithub.bcomment.BcommentService;
import com.ithub.blike.BlikeDTO;
import com.ithub.blike.BlikeService;
import com.ithub.career.CareerDTO;
import com.ithub.career.CareerService;
import com.ithub.city.CityDTO;
import com.ithub.common.Paging;
import com.ithub.common.ViewPath;
import com.ithub.country.CountryDTO;
import com.ithub.country.CountryService;
import com.ithub.emptype.EmpTypeDTO;
import com.ithub.emptype.EmpTypeService;
import com.ithub.industry.IndustryDTO;
import com.ithub.industry.IndustryService;
import com.ithub.jobpost.JobPostService;
import com.ithub.jpostsave.JpostSaveDTO;
import com.ithub.jpostsave.JpostSaveService;
import com.ithub.member.MemberDTO;
import com.ithub.member.MemberService;
import com.ithub.memfollow.MemFollowService;
import com.ithub.mtomhit.MtomhitDTO;
import com.ithub.mtomhit.MtomhitService;
import com.ithub.page.PageDTO;
import com.ithub.page.PageService;
import com.ithub.pagefollow.PageFollowService;
import com.ithub.position.PositionDTO;
import com.ithub.position.PositionService;
import com.ithub.ptomhit.PtomhitDTO;
import com.ithub.ptomhit.PtomhitService;

@Controller
public class BoardController {
	
	private BoardService boardService;
	private MemberService memberService;
	
	@Autowired
	private ServletContext application;
	@Autowired
	private MemFollowService memFollowService;
	@Autowired
	private PageFollowService pageFollowService;
	@Autowired // 자동 주입
	private PageService pageService;
	@Autowired // 자동 주입
	private MtomhitService mtomhitService;
	@Autowired // 자동 주입
	private PtomhitService ptomhitService;
	@Autowired // 자동 주입
	private JpostSaveService jpostSaveService;
	@Autowired
	private JobPostService jobPostService;
	@Autowired
	private BcommentService bcommentService;
	@Autowired
	private BlikeService blikeService;
	@Autowired
	private CareerService careerService;
	@Autowired
	private PositionService positionService;
	@Autowired
	private EmpTypeService empTypeService;
	@Autowired
	private IndustryService industryService;
	@Autowired
	private CountryService countryService;
	
	public BoardController(BoardService boardService,  MemberService memberService) {
		this.boardService = boardService;
		this.memberService = memberService;
	}
	
	// 게시물 작성 폼
	@RequestMapping("/board/writeForm")
	public String writeForm(HttpServletRequest request, Model model) {
		int mSeq = (int)request.getSession().getAttribute("login");
		
		int pSeq = 0;
		try {
			pSeq = Integer.parseInt(request.getParameter("pSeq"));
			
		} catch (NumberFormatException e) {
			e.printStackTrace();
		}
		
		MemberDTO dto = memberService.selectOne(mSeq);
		
		model.addAttribute("dto", dto);
		model.addAttribute("path", request.getParameter("path"));

		if(pSeq != 0) {
			model.addAttribute("pSeq", pSeq);
			return ViewPath.BOARD + "pwriteForm.jsp";
		}
		
		
		return ViewPath.BOARD + "writeForm.jsp";
	}
	
	// 게시물 작성
	@RequestMapping("/board/write")
	public String write(HttpServletRequest request, BoardDTO dto) {
		int mSeq = (Integer)request.getSession().getAttribute("login");
		dto.setmSeq(mSeq);
		
		String boardContent = dto.getBoardContent();
		
		dto.setBoardContent(boardContent.replaceAll("\r\n", "<br>"));
		
		//String savePath = application.getRealPath("/resources/upload/");
		String savePath = "/var/lib/tomcat9/file_repo";
		// 첨부파일을 안쓴다면 지워도 되는걸까?	
		MultipartFile photo = dto.getFile();
		
		String boardFile = null;
		
		if(!photo.isEmpty() || photo == null) {
			boardFile = photo.getOriginalFilename();
			boardFile = mSeq + "userBoardFile" + boardFile.substring(boardFile.lastIndexOf("."),boardFile.length());
			File saveFile = new File(savePath,boardFile);
			
			if(!saveFile.exists()) {
				saveFile.mkdir();
			} else {
				long time = System.currentTimeMillis();
				boardFile = String.format("%s%d%s", boardFile.substring(0, boardFile.lastIndexOf(".")), time, boardFile.substring(boardFile.lastIndexOf(".")));
				saveFile = new File(savePath, boardFile);
			}
			try {
				photo.transferTo(saveFile);
			} catch(IllegalStateException e) {
				e.printStackTrace();
			} catch(IOException e) {
				e.printStackTrace();
			}
			dto.setBoardFile(boardFile);
		}
		
		int check = boardService.insert(dto);
		String path = request.getParameter("path");
		
		String msg = null;
		String url = null;
		if(check != 0) {
			if("main".equals(path)) {
				msg = "성공";
				url = "/ithub/main.go";
			}
			
		} else {
			msg = "실패";
			url = "/ithub/board/writeform";
		}
		request.setAttribute("msg", msg);
		request.setAttribute("url", url);
		
		return ViewPath.MEMBER + "result.jsp";
	}
	

	// 페이지 게시물 작성
	@RequestMapping("/board/pwrite")
	public String pwrite(HttpServletRequest request, BoardDTO dto) {
		int mSeq = (Integer)request.getSession().getAttribute("login");
		dto.setmSeq(mSeq);
		
		String boardContent = dto.getBoardContent();
		
		dto.setBoardContent(boardContent.replaceAll("\r\n", "<br>"));
		
		String savePath = application.getRealPath("/resources/upload/");
		
		// 첨부파일을 안쓴다면 지워도 되는걸까?	
		MultipartFile photo = dto.getFile();
		
		String boardFile = null;
		
		if(!photo.isEmpty() || photo == null) {
			boardFile = photo.getOriginalFilename();
			boardFile = mSeq + "userBoardFile" + boardFile.substring(boardFile.lastIndexOf("."),boardFile.length());
			File saveFile = new File(savePath,boardFile);
			
			if(!saveFile.exists()) {
				saveFile.mkdir();
			} else {
				long time = System.currentTimeMillis();
				boardFile = String.format("%s%d%s", boardFile.substring(0, boardFile.lastIndexOf(".")), time, boardFile.substring(boardFile.lastIndexOf(".")));
				saveFile = new File(savePath, boardFile);
			}
			try {
				photo.transferTo(saveFile);
			} catch(IllegalStateException e) {
				e.printStackTrace();
			} catch(IOException e) {
				e.printStackTrace();
			}
			dto.setBoardFile(boardFile);
		}
		
		int check = boardService.pinsert(dto);
		
		String msg = null;
		String url = null;
		if(check != 0) {
			msg = "성공";
			url = "/ithub/board/plist";
			
		} else {
			msg = "실패";
			url = "/ithub/board/writeform";
		}
		request.setAttribute("msg", msg);
		request.setAttribute("url", url);
		
		return ViewPath.MEMBER + "result.jsp";
	}
	
	// 게시물 나열 및 페이징
	@RequestMapping("/board/list")
	public String list(HttpServletRequest request, Model model, Integer page, String type, String word, String path) {
		int mSeq = (int)request.getSession().getAttribute("login");
		
		MemberDTO dto = memberService.selectOne(mSeq);
		int flw = memFollowService.followCnt(dto.getmSeq());
		int flr = memFollowService.followerCnt(dto.getmSeq());
		int pflw = pageFollowService.followCnt(dto.getmSeq());
		
		dto.setFollowing((flw + pflw));
		dto.setFollower(flr);
		model.addAttribute("dto",dto);
		
		// type이랑 ""랑 같냐? 참 null, 거짓 type
		type = "".equals(type) ? null : type;
		
		word = "".equals(word) ? null : word;
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		map.put("type", type);
		map.put("word", word);
		map.put("mSeq", mSeq);
		
		if(page == null) {
			page = 1;
		}
		
		int boardCount = 0;
		
		if("main".equals(path)) {
			boardCount = boardService.getTotal(map);
		}else {
			boardCount = boardService.getMyTotal(map);
		}
		

		Paging paging = new Paging(page, boardCount);
		
		map.put("first", paging.getFirst());
		map.put("last", paging.getLast());
		
		// 5개씩 뽑아버리기
		List<BoardDTO> list2 = boardService.selectList(map);
		
		model.addAttribute("list2", list2);
		model.addAttribute("paging", paging);
		
		
		if("main".equals(path)) {
			// 댓글부분
			List<BcommentDTO> bclist = bcommentService.selectAll();
			model.addAttribute("bclist",bclist);
			
			List<BoardDTO> bcCount = boardService.bcCount();
			model.addAttribute("bcCount",bcCount);
			return ViewPath.MAIN + "/main/main.jsp";
		}
		
		
		List<PageDTO> myPage = pageService.getPage(mSeq);
		model.addAttribute("myPage", myPage);

		List<MtomhitDTO> hitList = mtomhitService.hitSelect(mSeq);	// 내 프로필을 본사람 리스트(조회자)
		model.addAttribute("hitList", hitList);
		
		List<MemberDTO> list = memberService.selectAll();			// 모든 회원 리스트
		model.addAttribute("list", list);
		
		List<JpostSaveDTO> myJoblist = jpostSaveService.myApplies(mSeq);
		model.addAttribute("myJoblist", myJoblist);
		
		
		// 커리어
		List<CareerDTO> myCareer = careerService.myCareer(mSeq);
		model.addAttribute("myCareer", myCareer);
		
		List<PositionDTO> position = positionService.selectList();
		model.addAttribute("position", position);
		List<EmpTypeDTO> emptype = empTypeService.selectList();
		model.addAttribute("emptype", emptype);
		List<IndustryDTO> industry = industryService.getIndustry();
		model.addAttribute("industry", industry);
		
		List<CountryDTO> country = countryService.getCountry();
		List<CityDTO> city = countryService.getCity();

		for (int i = 0; i < country.size(); i++) {
			for (int j = 0; j < city.size(); j++) {
				if(city.get(j).getcSeq() == country.get(i).getcSeq()) {
					country.get(i).getCity().add(city.get(j));
				}
			}
		}
		
		model.addAttribute("country", country);
		
		return ViewPath.MEMBER + "myProfile.jsp";
	}

	// 게시물 나열 및 페이징
	@RequestMapping("/board/plist")
	public String plist(HttpServletRequest request, Model model, Integer page, String type, String word, String path) {
		
		int mSeq = (Integer) request.getSession().getAttribute("login");
		
		int pSeq = Integer.parseInt(request.getParameter("pSeq").replaceAll("\'", ""));
		
		List<PtomhitDTO> hitList = ptomhitService.hitSelect(pSeq);	// 조회한 프로필을 본사람 리스트(조회자)
		model.addAttribute("hitList", hitList);
		
		List<MemberDTO> mlist = memberService.selectAll();				// 모든 회원 리스트
		model.addAttribute("mlist", mlist);	

		MemberDTO dto = memberService.selectOne(mSeq);
		PageDTO pdto = pageService.selectOne(pSeq);
		
		List<Map<String,Object>> jplist = jobPostService.mySelectPost(pSeq);
		
		int flr = pageFollowService.followerCnt(pSeq);
		
		pdto.setpFollower(flr);
		
		model.addAttribute("dto",dto);
		model.addAttribute("page",pdto);
		model.addAttribute("jplist",jplist);
		return ViewPath.PAGE + "myPage.jsp";
	}
	
	@RequestMapping("/board/updateForm")
	public String updateForm(Model model, HttpServletRequest request) {
		int mSeq = (int) request.getSession().getAttribute("login");
		MemberDTO dto = memberService.selectOne(mSeq);

		int boardSeq = Integer.parseInt(request.getParameter("boardSeq"));
		BoardDTO bdto = boardService.selectBoard(boardSeq);

		model.addAttribute("dto",dto);
		model.addAttribute("bdto",bdto);

		return ViewPath.BOARD + "updateForm.jsp";
	}
	
	@RequestMapping("/board/update")
	public String update(Model model, HttpServletRequest request, BoardDTO bdto) {
		int mSeq = (Integer)request.getSession().getAttribute("login");
		MemberDTO dto = memberService.selectOne(mSeq);
		model.addAttribute("dto", dto);
		
		String boardContent = bdto.getBoardContent();
		
		bdto.setBoardContent(boardContent.replaceAll("\r\n", "<br>"));
		
		String savePath = application.getRealPath("/resources/upload/");
		
		// 첨부파일을 안쓴다면 지워도 되는걸까?	
		MultipartFile photo = bdto.getFile();
		
		String boardFile = null;
		
		if(!photo.isEmpty() || photo == null) {
			boardFile = photo.getOriginalFilename();
			boardFile = mSeq + "userBoardFile" + boardFile.substring(boardFile.lastIndexOf("."),boardFile.length());
			File saveFile = new File(savePath,boardFile);
			
			if(!saveFile.exists()) {
				saveFile.mkdir();
			} else {
				long time = System.currentTimeMillis();
				boardFile = String.format("%s%d%s", boardFile.substring(0, boardFile.lastIndexOf(".")), time, boardFile.substring(boardFile.lastIndexOf(".")));
				saveFile = new File(savePath, boardFile);
			}
			try {
				photo.transferTo(saveFile);
			} catch(IllegalStateException e) {
				e.printStackTrace();
			} catch(IOException e) {
				e.printStackTrace();
			}
			bdto.setBoardFile(boardFile);
		}
		
		boardService.update(bdto);
		
		String path = request.getParameter("path");
		
		if("main".equals(path)) {
			return "redirect:/main.go";
		}
		
		return "redirect:/";
	}
	
	@RequestMapping("/board/delete")
	public String delete(HttpServletRequest request) throws Exception{
		
		int boardSeq = Integer.parseInt(request.getParameter("boardSeq"));
		
		boardService.delete(boardSeq);
		
		return "redirect:/";
	}
	
	@RequestMapping("/board/comment")
	@ResponseBody
	public Map<String, Object> comment(@RequestBody BcommentDTO dto, Model model,HttpServletRequest request){
		
		int mSeq = (Integer)request.getSession().getAttribute("login");
		
		dto.setmSeq(mSeq);
		dto.setGroupno(dto.getBoardSeq());
		
		List<BcommentDTO> order = bcommentService.selectGroup(dto.getGroupno());
		
		int no = dto.getOrderno();
		
		dto.setOrderno(no);
		
		bcommentService.insert(dto);
		
		List<BcommentDTO> bclist = bcommentService.selectGroup(dto.getGroupno());
		
		for (int i = 0; i < bclist.size(); i++) {
			bclist.get(i).setBcDateS(bclist.get(i).getBcDate() + "");
		}
		
		model.addAttribute("bclist",bclist);
		
		List<BoardDTO> bcCount = boardService.bcCount();
		model.addAttribute("bcCount",bcCount);
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("bclist", bclist);
		map.put("bcCount", bcCount);
		
		
		return map;
	}
	

	@RequestMapping("/board/like")
	@ResponseBody
	public Map<String, Object> like(@RequestBody BlikeDTO dto, Model model, HttpServletRequest request){
		
		int mSeq = (Integer)request.getSession().getAttribute("login");
		
		dto.setmSeq(mSeq);
		
		if(dto.getCheck() == 0) {
			blikeService.insert(dto);
		}else if(dto.getCheck() == 1) {
			blikeService.delete(dto);
		}
		
		List<BlikeDTO> myLikeBoard = blikeService.myLikeBoard(mSeq);
		
		List<BoardDTO> likeCount = boardService.likeCount();
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("myLikeBoard", myLikeBoard);
		map.put("likeCount", likeCount);
		map.put("dto", dto);
		
		
		return map;
	}

}
